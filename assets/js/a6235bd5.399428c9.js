"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6680],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,g=m["".concat(c,".").concat(f)]||m[f]||p[f]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7468:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={title:"Acts-as-taggable-on",sidebar_position:13},c=void 0,s={unversionedId:"going-further/acts-as-taggable-on",id:"going-further/acts-as-taggable-on",title:"Acts-as-taggable-on",description:"If you have an ActiveRecord model and you're using acts-as-taggable-on,",source:"@site/docs/going-further/acts-as-taggable-on.md",sourceDirName:"going-further",slug:"/going-further/acts-as-taggable-on",permalink:"/ransack/going-further/acts-as-taggable-on",editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/going-further/acts-as-taggable-on.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"Acts-as-taggable-on",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Wiki Contributors",permalink:"/ransack/going-further/wiki-contributors"},next:{title:"Polymorphic Searches",permalink:"/ransack/going-further/polymorphic-search"}},u={},p=[{value:"Option a - match keys exactly",id:"option-a---match-keys-exactly",level:3},{value:"Option b - match key combinations",id:"option-b---match-key-combinations",level:3},{value:"Option c - match substrings",id:"option-c---match-substrings",level:3}],m={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you have an ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveRecord")," model and you're using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mbleigh/acts-as-taggable-on"},"acts-as-taggable-on"),",\nchances are you might want to search on tagged fields."),(0,r.kt)("p",null,"Suppose you have this model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rb"},"class Task < ApplicationRecord\n  acts_as_taggable_on :projects\nend\n")),(0,r.kt)("p",null,"and you have the following two instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"Task"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rb"},"{ id: 1, name: 'Clean up my room',        projects: [ 'Home', 'Personal' ] }\n{ id: 2, name: 'Complete math exercises', projects: [ 'Homework', 'Study' ] }\n")),(0,r.kt)("p",null,"When you're writing a ",(0,r.kt)("inlineCode",{parentName:"p"},"Ransack")," search form, you can choose any of the following options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= search_form_for @search do |f| %>\n  <%= f.text_field :projects_name_in   %> \x3c!-- option a --\x3e\n  <%= f.text_field :projects_name_eq   %> \x3c!-- option b --\x3e\n  <%= f.text_field :projects_name_cont %> \x3c!-- option c --\x3e\n<% end %>\n")),(0,r.kt)("h3",{id:"option-a---match-keys-exactly"},"Option a - match keys exactly"),(0,r.kt)("p",null,"Option ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," will match keys exactly. This is the solution to choose if you want to distinguish 'Home' from 'Homework': searching for 'Home' will return just the ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," with id 1. It also allows searching for more than one tag at once (comma separated):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Home, Personal")," will return task 1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Home, Homework")," will return task 1 and 2")),(0,r.kt)("h3",{id:"option-b---match-key-combinations"},"Option b - match key combinations"),(0,r.kt)("p",null,"Option ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," will match all keys exactly. This is the solution if you wanna search for specific combinations of tags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Home")," will return nothing, as there is no Task with just the ",(0,r.kt)("inlineCode",{parentName:"li"},"Home")," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Home, Personal")," will return task 1")),(0,r.kt)("h3",{id:"option-c---match-substrings"},"Option c - match substrings"),(0,r.kt)("p",null,"Option ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," is used to match substrings. This is useful when you don't care for the exact tag, but only for part of it:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Home")," will return task 1 and 2 (",(0,r.kt)("inlineCode",{parentName:"li"},"/Home/")," matches both ",(0,r.kt)("inlineCode",{parentName:"li"},'"Home"')," and ",(0,r.kt)("inlineCode",{parentName:"li"},'"Homework"'),")")))}f.isMDXComponent=!0}}]);