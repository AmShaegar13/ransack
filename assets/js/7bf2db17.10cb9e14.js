"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7407],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=l(n),h=a,d=g["".concat(c,".").concat(h)]||g[h]||p[h]||o;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7100:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={sidebar_position:8,title:"Postgres searches"},c=void 0,l={unversionedId:"going-further/searching-postgres",id:"going-further/searching-postgres",title:"Postgres searches",description:"Searching on Postgres-specific column types.",source:"@site/docs/going-further/searching-postgres.md",sourceDirName:"going-further",slug:"/going-further/searching-postgres",permalink:"/ransack/going-further/searching-postgres",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/going-further/searching-postgres.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Postgres searches"},sidebar:"tutorialSidebar",previous:{title:"Other notes",permalink:"/ransack/going-further/other-notes"},next:{title:"External resources",permalink:"/ransack/going-further/external-guides"}},u={},p=[{value:"Postgres Array searches",id:"postgres-array-searches",level:2},{value:"PostgreSQL JSONB searches",id:"postgresql-jsonb-searches",level:2},{value:"Using a fixed key",id:"using-a-fixed-key",level:3},{value:"Using the JSONB contains operator",id:"using-the-jsonb-contains-operator",level:3},{value:"Treating the column as a string",id:"treating-the-column-as-a-string",level:3}],g={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Searching on Postgres-specific column types."),(0,o.kt)("h2",{id:"postgres-array-searches"},"Postgres Array searches"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/issues/321"},"this issue")," for details."),(0,o.kt)("h2",{id:"postgresql-jsonb-searches"},"PostgreSQL JSONB searches"),(0,o.kt)("h3",{id:"using-a-fixed-key"},"Using a fixed key"),(0,o.kt)("p",null,"See here for searching on a fixed key in a JSONB column: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/wiki/Using-Ransackers#3-search-on-a-fixed-key-in-a-jsonb--hstore-column"},"https://github.com/activerecord-hackery/ransack/wiki/Using-Ransackers#3-search-on-a-fixed-key-in-a-jsonb--hstore-column")),(0,o.kt)("h3",{id:"using-the-jsonb-contains-operator"},"Using the JSONB contains operator"),(0,o.kt)("p",null,"To fully use the power of the JSONB column you may want to filter on any key though:"),(0,o.kt)("p",null,"Install the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/GeorgeKaraszi/ActiveRecordExtended"},"ActiveRecordExtended")," gem to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"contains")," arel predicate to your project. It let's you use the ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/12/functions-json.html#FUNCTIONS-JSONB-OP-TABLE"},"Postgres contains operator @>"),"."),(0,o.kt)("p",null,"Add a custom predicate in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config/initializers/ransack.rb")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |config|\n  config.add_predicate 'jcont', arel_predicate: 'contains', formatter: proc { |v| JSON.parse(v) }\nend\n")),(0,o.kt)("p",null,"Now you can ransack the JSONB columns using the _jcont predicate. For example the Person model has a ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),' JSONB column, find entries where the column contains the {"group": "experts"} key-value pair:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Person.ransack(data_jcont: \'{"group": "experts"}\').result.to_sql\n\nSELECT "persons".* FROM "persons" WHERE "persons"."data" @> \'"{\\"group\\": \\"experts\\"}"\'\n')),(0,o.kt)("p",null,"If you have a GIN index on that column, the database will quickly be able to find that result."),(0,o.kt)("h3",{id:"treating-the-column-as-a-string"},"Treating the column as a string"),(0,o.kt)("p",null,"Warning: This method converts the column to a string and matches the given string to the result. This will be slow on large data_sets and does not make good use of the JSONB capabilities of Postgres, such as indexes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'class Contact < ApplicationRecord\n  ransacker :within_json do |parent|\n    Arel.sql("table.jsonb_data::text")\n  end\nend\n\nContact.all.ransack("within_json_cont" => "my")\n')),(0,o.kt)("p",null,"Will generate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'SELECT "contacts".* FROM "contacts" WHERE contacts.json_data ILIKE \'%my%\'')),(0,o.kt)("p",null,"Note that this search treats the entire JSON as string, including parens, etc. i.e. you can search for e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},'Contact.all.ransack("within_json_cont" => \'{"key": "value"}\')')))}h.isMDXComponent=!0}}]);